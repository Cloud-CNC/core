/**
* @fileoverview {{> entityClass}} controller
*/

//Imports
import {ParameterizedContext} from 'koa';
import validate from '../lib/validate';
import {{literal '{'}}{{> entityClass}}, {{> entityClass}}Schema, I{{> entityClass}}{{literal '}'}} from '../models/{{> entityPluralObject}}';

//Controller context
export interface {{> entityClass}}Context extends ParameterizedContext
{
{{#each (uniqueParameters)}}
  /**
  * {{{inflect "singularize" @root.description}}}
  */
  {{> entityObject}}?: I{{> entityClass}}
{{#unless @last}}

{{/unless}}
{{/each}}
}

{{#each operations}}
/**
 * {{{description}}}
 */
const {{name}} = {{#if (includes type 'all' 'create' 'update' 'delete')}}async {{/if}}(ctx: {{> entityClass}}Context) =>
{
{{#if (includes type 'get' 'update' 'delete')}}
  //Ensure the {{> entityLower}} is valid
  if (ctx.{{> entityObject}} == null)
  {
    //Log
    ctx.log.error(ctx, 'Invalid {{> entityLower}}!');

    //Reject
    ctx.throw({
      error: {
        name: 'Invalid {{> entityLower}}!',
        description: 'The supplied {{> entityLower}} was invalid.'
      }
    }, 400);
  }

{{/if}}
{{#if (includes type 'get' 'update' 'delete')}}
  //Validate the body
  validate({{> entityClass}}Schema, ctx);

{{/if}}
{{#if (equals type 'all')}}
  //Find and return all {{> entityPluralLower}}
  ctx.response.body = await {{> entityClass}}.find();

  //Log
  ctx.log.info('Got all {{> entityPluralLower}}.');
{{/if}}
{{#if (equals type 'create')}}
  //Instantiate the model
  const {{> entityObject}} = await {{> entityClass}}.create(ctx.request.body);

  //Save the model
  await {{> entityObject}}.save();

  //Return the model
  ctx.response.body = {
    id: {{> entityObject}}.id
  };

  //Log
  ctx.log.info(`Created {{> entityLower}} ${{literal '{'}}{{> entityObject}}.id{{literal '}'}}.`);
{{/if}}
{{#if (equals type 'get')}}
  //Return the model
  ctx.response.body = ctx.{{> entityObject}};

  //Log
  ctx.log.info(`Got {{> entityLower}} ${{literal '{'}}ctx.{{> entityObject}}.id{{literal '}'}}.`);
{{/if}}
{{#if (equals type 'update')}}
  //Update the model
  await ctx.{{> entityObject}}.update(ctx.request.body as object);

  //Log
  ctx.log.info(`Updated {{> entityLower}} ${{literal '{'}}ctx.{{> entityObject}}.id{{literal '}'}}.`);
{{/if}}
{{#if (equals type 'delete')}}
  //Delete the model
  await ctx.{{> entityObject}}.delete();

  //Log
  ctx.log.info(`Deleted {{> entityLower}} ${{literal '{'}}ctx.{{> entityObject}}.id{{literal '}'}}.`);
{{/if}}
};
{{#unless @last}}

{{/unless}}
{{/each}}

//Export
export default {
{{#each operations}}
  {{name}}{{#unless @last}},{{/unless}}
{{/each}}
};
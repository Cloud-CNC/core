/**
* @fileoverview {{> titleCaseEntity}} routes
*/

//Imports
import Router from '@koa/router';
import {DefaultState} from 'koa';
import controller, {{literal '{'}}{{> titleCaseEntity}}Context{{literal '}'}} from '../controllers/{{inflect 'camelize' (inflect 'pluralize' name)}}';
import {{literal '{'}}{{> titleCaseEntity}}{{literal '}'}} from '../models/{{inflect 'camelize' (inflect 'pluralize' name)}}';

//Router setup
const router = new Router<DefaultState, {{> titleCaseEntity}}Context>();

router
{{#each (uniqueParameters)}}
  //Route level {{> lowerCaseEntity}}
  .param('{{name}}', async ({{name}}, ctx: {{> titleCaseEntity}}Context, next) =>
  {
    //Get the {{> lowerCaseEntity}} by its {{name}}
{{#unless (equals name "id") }}
    const {{> camelCaseEntity}} = await {{> titleCaseEntity}}.findOne({
      {{name}}
    });
{{/unless}}
{{#if (equals name "id") }}
    const {{> camelCaseEntity}} = await {{> titleCaseEntity}}.findById({{name}});
{{/if}}

    //Ensure the {{name}} is valid
    if ({{> camelCaseEntity}} == null)
    {
      return ctx.throw('Invalid {{> lowerCaseEntity}} {{name}}', 402);
    }

    ctx.{{> camelCaseEntity}} = {{> camelCaseEntity}};

    return next();
  })

{{/each}}
{{#each operations}}
  //{{{description}}}
  .{{method}}('{{parameter path}}', controller.{{inflect 'camelize' name}}){{#if @last}};{{/if}}
{{#unless @last}}

{{/unless}}
{{/each}}

//Export
export default router;